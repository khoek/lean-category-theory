-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Tim Baumann, Stephen Morgan, Scott Morrison

import categories.isomorphism
import categories.functor_categories

open categories
open categories.isomorphism
open categories.functor
open categories.functor_categories

namespace categories.natural_transformation

universes u‚ÇÅ u‚ÇÇ v‚ÇÅ v‚ÇÇ

variable {C : Type (u‚ÇÅ+1)}
variable [category C]
variable {D : Type (u‚ÇÇ+1)}
variable [category D]

definition NaturalIsomorphism (F G : C ‚Üù D) := F ‚âÖ G

infix ` ‚áî `:10 := NaturalIsomorphism -- type as \<=>

-- It's a pity we need to separately define this coercion.
-- Ideally the coercion from Isomorphism along .morphism would just apply here.
-- Somehow we want the definition above to be more transparent?
instance NaturalIsomorphism_coercion_to_NaturalTransformation (F G : C ‚Üù D) : has_coe (F ‚áî G) (F ‚üπ G) :=
  {coe := Isomorphism.morphism}

variables {F G H : C ‚Üù D}

@[simp,ematch] lemma NaturalIsomorphism.componentwise_witness_1
  (Œ± : F ‚áî G)
  (X : C)
   : (Œ±.morphism.components X) ‚â´ (Œ±.inverse.components X) = ùüô (F +> X)
   := congr_arg (Œª Œ≤, NaturalTransformation.components Œ≤ X) Œ±.witness_1
@[simp,ematch] lemma NaturalIsomorphism.componentwise_witness_1_assoc
  (Œ± : F ‚áî G)
  (X : C) (Z : D) (f : (F +> X) ‚ü∂ Z)
   : (Œ±.morphism.components X) ‚â´ (Œ±.inverse.components X) ‚â´ f = f
   := by obviously
@[simp,ematch] lemma NaturalIsomorphism.componentwise_witness_2
  (Œ± : F ‚áî G)
  (X : C)
   : (Œ±.inverse.components X) ‚â´ (Œ±.morphism.components X) = ùüô (G +> X)
   := congr_arg (Œª Œ≤, NaturalTransformation.components Œ≤ X) Œ±.witness_2
@[simp,ematch] lemma NaturalIsomorphism.componentwise_witness_2_assoc
  (Œ± : F ‚áî G)
  (X : C) (Z : D) (f : (G +> X) ‚ü∂ Z)
   : (Œ±.inverse.components X) ‚â´ (Œ±.morphism.components X) ‚â´ f = f
   := by obviously

@[ematch] lemma {u1 v1 u2 v2} NaturalIsomorphism.naturality_1 
  (Œ± : F ‚áî G)
  {X Y : C}
  (f : X ‚ü∂ Y)
   : (Œ±.inverse.components X) ‚â´ (F &> f) ‚â´ (Œ±.morphism.components Y) = G &> f := by obviously

@[ematch] lemma {u1 v1 u2 v2} NaturalIsomorphism.naturality_2 
  (Œ± : F ‚áî G)
  {X Y : C}
  (f : X ‚ü∂ Y)
   : (Œ±.morphism.components X) ‚â´ (G &> f) ‚â´ (Œ±.inverse.components Y) = F &> f := by obviously

definition NaturalIsomorphism.from_components
  (components : ‚àÄ X : C, (F +> X) ‚âÖ (G +> X))
  (naturality : ‚àÄ {X Y : C} (f : X ‚ü∂ Y), (F &> f) ‚â´ (components Y).morphism = (components X).morphism ‚â´ (G &> f)) : NaturalIsomorphism F G :=
{ morphism  := { components := Œª X, (components X).morphism, },
  inverse   := { components := Œª X, (components X).inverse,
                 naturality := Œª X Y f, begin 
                                          let p := congr_arg (Œª f, (components X).inverse ‚â´ (f ‚â´ (components Y).inverse)) (eq.symm (naturality f)),
                                          tidy,
                                        end } }

definition vertical_composition_of_NaturalIsomorphisms (Œ± : F ‚áî G) (Œ≤ : G ‚áî H) : F ‚áî H :=
Isomorphism.comp Œ± Œ≤

attribute [reducible] NaturalIsomorphism

open NaturalTransformation

definition is_NaturalIsomorphism  (Œ± : F ‚üπ G) := @is_Isomorphism (C ‚Üù D) _ F G Œ±
attribute [class] is_NaturalIsomorphism

@[ematch] lemma is_NaturalIsomorphism_componentwise_witness_1
  (Œ± : F ‚üπ G)
  (w : is_NaturalIsomorphism Œ±)
  (X : C)
   : (Œ±.components X) ‚â´ (w.inverse.components X) = ùüô (F +> X)
   := congr_arg (Œª Œ≤, NaturalTransformation.components Œ≤ X) w.witness_1
@[ematch] lemma is_NaturalIsomorphism_componentwise_witness_2
  (Œ± : F ‚üπ G)
  (w : is_NaturalIsomorphism Œ±)
  (X : C)
   : (w.inverse.components X) ‚â´ (Œ±.components X) = ùüô (G +> X)
   := congr_arg (Œª Œ≤, NaturalTransformation.components Œ≤ X) w.witness_2

instance (F : C ‚Üù D) : is_NaturalIsomorphism (1 : F ‚üπ F) := {
    inverse := 1
}

instance NaturalIsomorphism.morphism.is_NaturalIsomorphism {F G : C ‚Üù D} (Œ± : F ‚áî G) : is_NaturalIsomorphism (Œ±.morphism) := 
{ inverse := Œ±.inverse }
instance NaturalIsomorphism.inverse.is_NaturalIsomorphism  {F G : C ‚Üù D} (Œ± : F ‚áî G) : is_NaturalIsomorphism (Œ±.inverse) := 
{ inverse := Œ±.morphism }

@[reducible] definition NaturalIsomorphism.components {F G : C ‚Üù D} (Œ± : F ‚áî G) (X : C) : (F +> X) ‚âÖ (G +> X) := 
{ morphism := Œ±.morphism.components X,
  inverse  := Œ±.inverse.components X }

instance NaturalIsomorphism.morphisms.components.is_Isomorphism {F G : C ‚Üù D} (Œ± : F ‚áî G) (X : C) : is_Isomorphism (Œ±.morphism.components X) := 
{ inverse := Œ±.inverse.components X }
instance NaturalIsomorphism.inverse.components.is_Isomorphism   {F G : C ‚Üù D} (Œ± : F ‚áî G) (X : C) : is_Isomorphism (Œ±.inverse.components X) := 
{ inverse := Œ±.morphism.components X }

@[reducible] definition NaturalIsomorphism.reverse {F G : C ‚Üù D} (Œ± : F ‚áî G) : G ‚áî F := {
    morphism := Œ±.inverse,
    inverse := Œ±.morphism
}

end categories.natural_transformation
